plugins {
  id 'java'
  id 'nu.studer.jooq' version '5.2.1'
  id 'com.palantir.git-version' version '0.12.3'
}

group 'space.nerdsin.plugins'
version gitVersion()
archivesBaseName = "$pluginName"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_16

configurations {
  compileJar {}

  compileClasspath.extendsFrom compileJar
  runtimeClasspath.extendsFrom compileJar
}

jooq {
  version = jooqVersion

  configurations {
    main {
      generationTool {
        jdbc {
          driver = 'org.h2.Driver'
          url = 'jdbc:h2:mem:'
        }
        generator {
          name = 'org.jooq.codegen.DefaultGenerator'
          strategy {
            name = 'org.jooq.codegen.DefaultGeneratorStrategy'
          }
          //noinspection GroovyAssignabilityCheck
          database {
            name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
            properties {
              //noinspection GroovyAssignabilityCheck
              property {
                key = 'scripts'
                value = 'src/main/resources/db/h2/*'
              }
              //noinspection GroovyAssignabilityCheck
              property {
                key = 'sort'
                value = 'semantic'
              }
            }

            inputSchema = 'PUBLIC'
            outputSchemaToDefault = true
          }
          generate {}
          target {
            packageName = 'space.nerdsin.plugins.codegen'
          }
        }
      }
    }
  }
}

repositories {
  mavenCentral()
  maven { url = 'https://papermc.io/repo/repository/maven-public/' }
}

dependencies {
  implementation group: 'com.destroystokyo.paper', name: 'paper-api', version: paperApiVersion

  compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  compileJar group: 'com.h2database', name: 'h2', version: h2DatabaseVersion
  jooqGenerator group: 'com.h2database', name: 'h2', version: h2DatabaseVersion

  compileJar group: 'org.jooq', name: 'jooq'
  jooqGenerator group: 'org.jooq', name: 'jooq-meta'
  jooqGenerator group: 'org.jooq', name: 'jooq-meta-extensions'
  jooqGenerator group: 'org.jooq', name: 'jooq-codegen'

  compileJar group: 'org.flywaydb', name: 'flyway-core', version: flywayCoreVersion

  compileJar group: 'com.google.inject', name: 'guice', version: guiceVersion
  compileJar group: 'org.reflections', name: 'reflections', version: reflectionsVersion
}

jar {
  archiveBaseName = "$archivesBaseName-SLIM"

  //noinspection GroovyAssignabilityCheck
  manifest {
    attributes("Class-Path": configurations.compileJar.collect { "libs/${it.getName()}" }.join(' '))
  }
}

task fatJar(type: Jar) {
  archiveBaseName = "$archivesBaseName-FAT"

  from {
    duplicatesStrategy = DuplicatesStrategy.WARN
    configurations.compileJar.collect { it.isDirectory() ? it : zipTree(it) }
  }

  finalizedBy task("copyLibs", type: Copy) {
    from configurations.compileJar
    into tasks.fatJar.destinationDirectory.dir("libs")
  }

  with jar
}

artifacts {
  archives fatJar
}

processResources {
  filesMatching('**/plugin.yml') {
    //noinspection UnnecessaryQualifiedReference
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        'name'      : archivesBaseName,
        'class'     : pluginClass,
        'version'   : (project.version =~ /v([\d]+\.[\d]+\.[\d]+).*/)
            .with { it[0] }
            .with { m, ver -> ver },
        'apiversion': pluginApiVersion
    ]);
  }

  filesMatching('**/config.yml') {
    //noinspection UnnecessaryQualifiedReference
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        'database.filename': databaseFileName
    ]);
  }
}
